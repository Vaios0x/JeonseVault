/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace JeonseVault {
  export type DepositStruct = {
    id: BigNumberish;
    tenant: AddressLike;
    landlord: AddressLike;
    amount: BigNumberish;
    startDate: BigNumberish;
    endDate: BigNumberish;
    propertyId: string;
    propertyAddress: string;
    status: BigNumberish;
    investmentPoolShare: BigNumberish;
    createdAt: BigNumberish;
    releasedAt: BigNumberish;
    isInvestmentEnabled: boolean;
  };

  export type DepositStructOutput = [
    id: bigint,
    tenant: string,
    landlord: string,
    amount: bigint,
    startDate: bigint,
    endDate: bigint,
    propertyId: string,
    propertyAddress: string,
    status: bigint,
    investmentPoolShare: bigint,
    createdAt: bigint,
    releasedAt: bigint,
    isInvestmentEnabled: boolean
  ] & {
    id: bigint;
    tenant: string;
    landlord: string;
    amount: bigint;
    startDate: bigint;
    endDate: bigint;
    propertyId: string;
    propertyAddress: string;
    status: bigint;
    investmentPoolShare: bigint;
    createdAt: bigint;
    releasedAt: bigint;
    isInvestmentEnabled: boolean;
  };
}

export interface JeonseVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "EARLY_RELEASE_FEE"
      | "ESCROW_FEE"
      | "MAX_DEPOSIT_AMOUNT"
      | "MIN_DEPOSIT_AMOUNT"
      | "ORACLE_ROLE"
      | "complianceModule"
      | "createDeposit"
      | "deposits"
      | "disputeDeposit"
      | "earlyReleaseDeposit"
      | "emergencyWithdraw"
      | "getDeposit"
      | "getDepositsByStatus"
      | "getRoleAdmin"
      | "getTotalDeposits"
      | "getUserDeposits"
      | "grantRole"
      | "hasRole"
      | "investmentPool"
      | "pause"
      | "paused"
      | "propertyOracle"
      | "releaseDeposit"
      | "renounceRole"
      | "resolveDispute"
      | "revokeRole"
      | "supportsInterface"
      | "totalValueLocked"
      | "unpause"
      | "updateComplianceModule"
      | "updateInvestmentPool"
      | "updatePropertyOracle"
      | "userDeposits"
      | "userTotalDeposits"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DepositCreated"
      | "DepositDisputed"
      | "DepositReleased"
      | "EmergencyWithdrawal"
      | "InvestmentEnabled"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EARLY_RELEASE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ESCROW_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DEPOSIT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DEPOSIT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "complianceModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDeposit",
    values: [AddressLike, BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeDeposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyReleaseDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositsByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDeposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propertyOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateComplianceModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInvestmentPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePropertyOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposits",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalDeposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EARLY_RELEASE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ESCROW_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DEPOSIT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DEPOSIT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "complianceModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyReleaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositsByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investmentPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertyOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateComplianceModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInvestmentPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePropertyOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace DepositCreatedEvent {
  export type InputTuple = [
    depositId: BigNumberish,
    tenant: AddressLike,
    landlord: AddressLike,
    amount: BigNumberish,
    propertyId: string
  ];
  export type OutputTuple = [
    depositId: bigint,
    tenant: string,
    landlord: string,
    amount: bigint,
    propertyId: string
  ];
  export interface OutputObject {
    depositId: bigint;
    tenant: string;
    landlord: string;
    amount: bigint;
    propertyId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositDisputedEvent {
  export type InputTuple = [
    depositId: BigNumberish,
    disputer: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    depositId: bigint,
    disputer: string,
    reason: string
  ];
  export interface OutputObject {
    depositId: bigint;
    disputer: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositReleasedEvent {
  export type InputTuple = [
    depositId: BigNumberish,
    tenant: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    depositId: bigint,
    tenant: string,
    amount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    depositId: bigint;
    tenant: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawalEvent {
  export type InputTuple = [
    depositId: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    depositId: bigint,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    depositId: bigint;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentEnabledEvent {
  export type InputTuple = [
    depositId: BigNumberish,
    sharePercentage: BigNumberish
  ];
  export type OutputTuple = [depositId: bigint, sharePercentage: bigint];
  export interface OutputObject {
    depositId: bigint;
    sharePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JeonseVault extends BaseContract {
  connect(runner?: ContractRunner | null): JeonseVault;
  waitForDeployment(): Promise<this>;

  interface: JeonseVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  EARLY_RELEASE_FEE: TypedContractMethod<[], [bigint], "view">;

  ESCROW_FEE: TypedContractMethod<[], [bigint], "view">;

  MAX_DEPOSIT_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  MIN_DEPOSIT_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  ORACLE_ROLE: TypedContractMethod<[], [string], "view">;

  complianceModule: TypedContractMethod<[], [string], "view">;

  createDeposit: TypedContractMethod<
    [
      landlord: AddressLike,
      endDate: BigNumberish,
      propertyId: string,
      propertyAddress: string,
      enableInvestment: boolean
    ],
    [void],
    "payable"
  >;

  deposits: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        tenant: string;
        landlord: string;
        amount: bigint;
        startDate: bigint;
        endDate: bigint;
        propertyId: string;
        propertyAddress: string;
        status: bigint;
        investmentPoolShare: bigint;
        createdAt: bigint;
        releasedAt: bigint;
        isInvestmentEnabled: boolean;
      }
    ],
    "view"
  >;

  disputeDeposit: TypedContractMethod<
    [depositId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  earlyReleaseDeposit: TypedContractMethod<
    [depositId: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [depositId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getDeposit: TypedContractMethod<
    [depositId: BigNumberish],
    [JeonseVault.DepositStructOutput],
    "view"
  >;

  getDepositsByStatus: TypedContractMethod<
    [status: BigNumberish],
    [bigint[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalDeposits: TypedContractMethod<[], [bigint], "view">;

  getUserDeposits: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  investmentPool: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  propertyOracle: TypedContractMethod<[], [string], "view">;

  releaseDeposit: TypedContractMethod<
    [depositId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  resolveDispute: TypedContractMethod<
    [depositId: BigNumberish, resolution: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalValueLocked: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateComplianceModule: TypedContractMethod<
    [newModule: AddressLike],
    [void],
    "nonpayable"
  >;

  updateInvestmentPool: TypedContractMethod<
    [newPool: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePropertyOracle: TypedContractMethod<
    [newOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  userDeposits: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userTotalDeposits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EARLY_RELEASE_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ESCROW_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DEPOSIT_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_DEPOSIT_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ORACLE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "complianceModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createDeposit"
  ): TypedContractMethod<
    [
      landlord: AddressLike,
      endDate: BigNumberish,
      propertyId: string,
      propertyAddress: string,
      enableInvestment: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deposits"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        tenant: string;
        landlord: string;
        amount: bigint;
        startDate: bigint;
        endDate: bigint;
        propertyId: string;
        propertyAddress: string;
        status: bigint;
        investmentPoolShare: bigint;
        createdAt: bigint;
        releasedAt: bigint;
        isInvestmentEnabled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "disputeDeposit"
  ): TypedContractMethod<
    [depositId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earlyReleaseDeposit"
  ): TypedContractMethod<[depositId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [depositId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDeposit"
  ): TypedContractMethod<
    [depositId: BigNumberish],
    [JeonseVault.DepositStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDepositsByStatus"
  ): TypedContractMethod<[status: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalDeposits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserDeposits"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "investmentPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "propertyOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseDeposit"
  ): TypedContractMethod<[depositId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [depositId: BigNumberish, resolution: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalValueLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateComplianceModule"
  ): TypedContractMethod<[newModule: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateInvestmentPool"
  ): TypedContractMethod<[newPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePropertyOracle"
  ): TypedContractMethod<[newOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userDeposits"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTotalDeposits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DepositCreated"
  ): TypedContractEvent<
    DepositCreatedEvent.InputTuple,
    DepositCreatedEvent.OutputTuple,
    DepositCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DepositDisputed"
  ): TypedContractEvent<
    DepositDisputedEvent.InputTuple,
    DepositDisputedEvent.OutputTuple,
    DepositDisputedEvent.OutputObject
  >;
  getEvent(
    key: "DepositReleased"
  ): TypedContractEvent<
    DepositReleasedEvent.InputTuple,
    DepositReleasedEvent.OutputTuple,
    DepositReleasedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdrawal"
  ): TypedContractEvent<
    EmergencyWithdrawalEvent.InputTuple,
    EmergencyWithdrawalEvent.OutputTuple,
    EmergencyWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentEnabled"
  ): TypedContractEvent<
    InvestmentEnabledEvent.InputTuple,
    InvestmentEnabledEvent.OutputTuple,
    InvestmentEnabledEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "DepositCreated(uint256,address,address,uint256,string)": TypedContractEvent<
      DepositCreatedEvent.InputTuple,
      DepositCreatedEvent.OutputTuple,
      DepositCreatedEvent.OutputObject
    >;
    DepositCreated: TypedContractEvent<
      DepositCreatedEvent.InputTuple,
      DepositCreatedEvent.OutputTuple,
      DepositCreatedEvent.OutputObject
    >;

    "DepositDisputed(uint256,address,string)": TypedContractEvent<
      DepositDisputedEvent.InputTuple,
      DepositDisputedEvent.OutputTuple,
      DepositDisputedEvent.OutputObject
    >;
    DepositDisputed: TypedContractEvent<
      DepositDisputedEvent.InputTuple,
      DepositDisputedEvent.OutputTuple,
      DepositDisputedEvent.OutputObject
    >;

    "DepositReleased(uint256,address,uint256,uint256)": TypedContractEvent<
      DepositReleasedEvent.InputTuple,
      DepositReleasedEvent.OutputTuple,
      DepositReleasedEvent.OutputObject
    >;
    DepositReleased: TypedContractEvent<
      DepositReleasedEvent.InputTuple,
      DepositReleasedEvent.OutputTuple,
      DepositReleasedEvent.OutputObject
    >;

    "EmergencyWithdrawal(uint256,address,uint256)": TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;
    EmergencyWithdrawal: TypedContractEvent<
      EmergencyWithdrawalEvent.InputTuple,
      EmergencyWithdrawalEvent.OutputTuple,
      EmergencyWithdrawalEvent.OutputObject
    >;

    "InvestmentEnabled(uint256,uint256)": TypedContractEvent<
      InvestmentEnabledEvent.InputTuple,
      InvestmentEnabledEvent.OutputTuple,
      InvestmentEnabledEvent.OutputObject
    >;
    InvestmentEnabled: TypedContractEvent<
      InvestmentEnabledEvent.InputTuple,
      InvestmentEnabledEvent.OutputTuple,
      InvestmentEnabledEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
