/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ComplianceModule {
  export type UserComplianceStruct = {
    userAddress: AddressLike;
    realName: string;
    identificationNumber: string;
    phoneNumber: string;
    bankAccount: string;
    isVerified: boolean;
    isActive: boolean;
    verificationDate: BigNumberish;
    lastUpdate: BigNumberish;
    level: BigNumberish;
    transactionLimit: BigNumberish;
    monthlyLimit: BigNumberish;
    monthlySpent: BigNumberish;
    lastMonthReset: BigNumberish;
  };

  export type UserComplianceStructOutput = [
    userAddress: string,
    realName: string,
    identificationNumber: string,
    phoneNumber: string,
    bankAccount: string,
    isVerified: boolean,
    isActive: boolean,
    verificationDate: bigint,
    lastUpdate: bigint,
    level: bigint,
    transactionLimit: bigint,
    monthlyLimit: bigint,
    monthlySpent: bigint,
    lastMonthReset: bigint
  ] & {
    userAddress: string;
    realName: string;
    identificationNumber: string;
    phoneNumber: string;
    bankAccount: string;
    isVerified: boolean;
    isActive: boolean;
    verificationDate: bigint;
    lastUpdate: bigint;
    level: bigint;
    transactionLimit: bigint;
    monthlyLimit: bigint;
    monthlySpent: bigint;
    lastMonthReset: bigint;
  };
}

export interface ComplianceModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "BASIC_LIMIT"
      | "COMPLIANCE_OFFICER_ROLE"
      | "CORPORATE_LIMIT"
      | "DEFAULT_ADMIN_ROLE"
      | "PREMIUM_LIMIT"
      | "STANDARD_LIMIT"
      | "VERIFICATION_VALIDITY_PERIOD"
      | "VERIFIER_ROLE"
      | "batchVerifyUsers"
      | "blacklistUser"
      | "blacklistedUsers"
      | "checkCompliance"
      | "checkTransactionLimits"
      | "deactivateUser"
      | "extendVerification"
      | "getAllVerifiedUsers"
      | "getRoleAdmin"
      | "getUserById"
      | "getUserByPhone"
      | "getUserCompliance"
      | "getUserMonthlyLimit"
      | "getUserMonthlySpent"
      | "getUserTransactionLimit"
      | "getVerifiedUserCount"
      | "grantRole"
      | "hasRole"
      | "idToAddress"
      | "isUserBlacklisted"
      | "isUserVerified"
      | "lastTransactionTime"
      | "pause"
      | "paused"
      | "phoneToAddress"
      | "reactivateUser"
      | "removeFromBlacklist"
      | "renounceRole"
      | "reportSuspiciousActivity"
      | "revokeRole"
      | "supportsInterface"
      | "suspiciousActivityCount"
      | "unpause"
      | "updateComplianceLevel"
      | "userCompliance"
      | "verifiedUsers"
      | "verifyUser"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ComplianceLevelUpdated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SuspiciousActivityReported"
      | "TransactionLimitExceeded"
      | "Unpaused"
      | "UserBlacklisted"
      | "UserVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASIC_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_OFFICER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CORPORATE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PREMIUM_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STANDARD_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFICATION_VALIDITY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchVerifyUsers",
    values: [
      AddressLike[],
      string[],
      string[],
      string[],
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistUser",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedUsers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCompliance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTransactionLimits",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "extendVerification",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVerifiedUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getUserById", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserByPhone",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCompliance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMonthlyLimit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMonthlySpent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTransactionLimit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedUserCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "idToAddress", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isUserBlacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserVerified",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTransactionTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "phoneToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reactivateUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromBlacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reportSuspiciousActivity",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "suspiciousActivityCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateComplianceLevel",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userCompliance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyUser",
    values: [AddressLike, string, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BASIC_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_OFFICER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CORPORATE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PREMIUM_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STANDARD_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFICATION_VALIDITY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchVerifyUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTransactionLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllVerifiedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserByPhone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMonthlyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMonthlySpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTransactionLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedUserCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "idToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTransactionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "phoneToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reactivateUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportSuspiciousActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspiciousActivityCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateComplianceLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyUser", data: BytesLike): Result;
}

export namespace ComplianceLevelUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldLevel: BigNumberish,
    newLevel: BigNumberish
  ];
  export type OutputTuple = [user: string, oldLevel: bigint, newLevel: bigint];
  export interface OutputObject {
    user: string;
    oldLevel: bigint;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuspiciousActivityReportedEvent {
  export type InputTuple = [
    user: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, reason: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionLimitExceededEvent {
  export type InputTuple = [
    user: AddressLike,
    attemptedAmount: BigNumberish,
    limit: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    attemptedAmount: bigint,
    limit: bigint
  ];
  export interface OutputObject {
    user: string;
    attemptedAmount: bigint;
    limit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBlacklistedEvent {
  export type InputTuple = [
    user: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, reason: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserVerifiedEvent {
  export type InputTuple = [
    user: AddressLike,
    realName: string,
    level: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    realName: string,
    level: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    realName: string;
    level: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ComplianceModule extends BaseContract {
  connect(runner?: ContractRunner | null): ComplianceModule;
  waitForDeployment(): Promise<this>;

  interface: ComplianceModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  BASIC_LIMIT: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_OFFICER_ROLE: TypedContractMethod<[], [string], "view">;

  CORPORATE_LIMIT: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  PREMIUM_LIMIT: TypedContractMethod<[], [bigint], "view">;

  STANDARD_LIMIT: TypedContractMethod<[], [bigint], "view">;

  VERIFICATION_VALIDITY_PERIOD: TypedContractMethod<[], [bigint], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  batchVerifyUsers: TypedContractMethod<
    [
      users: AddressLike[],
      realNames: string[],
      idNumbers: string[],
      phoneNumbers: string[],
      bankAccounts: string[],
      levels: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  blacklistUser: TypedContractMethod<
    [user: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  blacklistedUsers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  checkCompliance: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  checkTransactionLimits: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deactivateUser: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  extendVerification: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllVerifiedUsers: TypedContractMethod<[], [string[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserById: TypedContractMethod<
    [identificationNumber: string],
    [string],
    "view"
  >;

  getUserByPhone: TypedContractMethod<[phoneNumber: string], [string], "view">;

  getUserCompliance: TypedContractMethod<
    [user: AddressLike],
    [ComplianceModule.UserComplianceStructOutput],
    "view"
  >;

  getUserMonthlyLimit: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserMonthlySpent: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserTransactionLimit: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getVerifiedUserCount: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  idToAddress: TypedContractMethod<[arg0: string], [string], "view">;

  isUserBlacklisted: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  isUserVerified: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  lastTransactionTime: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  phoneToAddress: TypedContractMethod<[arg0: string], [string], "view">;

  reactivateUser: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  removeFromBlacklist: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  reportSuspiciousActivity: TypedContractMethod<
    [user: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  suspiciousActivityCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateComplianceLevel: TypedContractMethod<
    [user: AddressLike, newLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  userCompliance: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        userAddress: string;
        realName: string;
        identificationNumber: string;
        phoneNumber: string;
        bankAccount: string;
        isVerified: boolean;
        isActive: boolean;
        verificationDate: bigint;
        lastUpdate: bigint;
        level: bigint;
        transactionLimit: bigint;
        monthlyLimit: bigint;
        monthlySpent: bigint;
        lastMonthReset: bigint;
      }
    ],
    "view"
  >;

  verifiedUsers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  verifyUser: TypedContractMethod<
    [
      user: AddressLike,
      realName: string,
      identificationNumber: string,
      phoneNumber: string,
      bankAccount: string,
      level: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASIC_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_OFFICER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CORPORATE_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PREMIUM_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STANDARD_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERIFICATION_VALIDITY_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchVerifyUsers"
  ): TypedContractMethod<
    [
      users: AddressLike[],
      realNames: string[],
      idNumbers: string[],
      phoneNumbers: string[],
      bankAccounts: string[],
      levels: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "blacklistUser"
  ): TypedContractMethod<
    [user: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "blacklistedUsers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkCompliance"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkTransactionLimits"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateUser"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "extendVerification"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllVerifiedUsers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserById"
  ): TypedContractMethod<[identificationNumber: string], [string], "view">;
  getFunction(
    nameOrSignature: "getUserByPhone"
  ): TypedContractMethod<[phoneNumber: string], [string], "view">;
  getFunction(
    nameOrSignature: "getUserCompliance"
  ): TypedContractMethod<
    [user: AddressLike],
    [ComplianceModule.UserComplianceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserMonthlyLimit"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserMonthlySpent"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTransactionLimit"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVerifiedUserCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "idToAddress"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "isUserBlacklisted"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUserVerified"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastTransactionTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "phoneToAddress"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "reactivateUser"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFromBlacklist"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reportSuspiciousActivity"
  ): TypedContractMethod<
    [user: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "suspiciousActivityCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateComplianceLevel"
  ): TypedContractMethod<
    [user: AddressLike, newLevel: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userCompliance"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        userAddress: string;
        realName: string;
        identificationNumber: string;
        phoneNumber: string;
        bankAccount: string;
        isVerified: boolean;
        isActive: boolean;
        verificationDate: bigint;
        lastUpdate: bigint;
        level: bigint;
        transactionLimit: bigint;
        monthlyLimit: bigint;
        monthlySpent: bigint;
        lastMonthReset: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifiedUsers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verifyUser"
  ): TypedContractMethod<
    [
      user: AddressLike,
      realName: string,
      identificationNumber: string,
      phoneNumber: string,
      bankAccount: string,
      level: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ComplianceLevelUpdated"
  ): TypedContractEvent<
    ComplianceLevelUpdatedEvent.InputTuple,
    ComplianceLevelUpdatedEvent.OutputTuple,
    ComplianceLevelUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SuspiciousActivityReported"
  ): TypedContractEvent<
    SuspiciousActivityReportedEvent.InputTuple,
    SuspiciousActivityReportedEvent.OutputTuple,
    SuspiciousActivityReportedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionLimitExceeded"
  ): TypedContractEvent<
    TransactionLimitExceededEvent.InputTuple,
    TransactionLimitExceededEvent.OutputTuple,
    TransactionLimitExceededEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserBlacklisted"
  ): TypedContractEvent<
    UserBlacklistedEvent.InputTuple,
    UserBlacklistedEvent.OutputTuple,
    UserBlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "UserVerified"
  ): TypedContractEvent<
    UserVerifiedEvent.InputTuple,
    UserVerifiedEvent.OutputTuple,
    UserVerifiedEvent.OutputObject
  >;

  filters: {
    "ComplianceLevelUpdated(address,uint8,uint8)": TypedContractEvent<
      ComplianceLevelUpdatedEvent.InputTuple,
      ComplianceLevelUpdatedEvent.OutputTuple,
      ComplianceLevelUpdatedEvent.OutputObject
    >;
    ComplianceLevelUpdated: TypedContractEvent<
      ComplianceLevelUpdatedEvent.InputTuple,
      ComplianceLevelUpdatedEvent.OutputTuple,
      ComplianceLevelUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SuspiciousActivityReported(address,string,uint256)": TypedContractEvent<
      SuspiciousActivityReportedEvent.InputTuple,
      SuspiciousActivityReportedEvent.OutputTuple,
      SuspiciousActivityReportedEvent.OutputObject
    >;
    SuspiciousActivityReported: TypedContractEvent<
      SuspiciousActivityReportedEvent.InputTuple,
      SuspiciousActivityReportedEvent.OutputTuple,
      SuspiciousActivityReportedEvent.OutputObject
    >;

    "TransactionLimitExceeded(address,uint256,uint256)": TypedContractEvent<
      TransactionLimitExceededEvent.InputTuple,
      TransactionLimitExceededEvent.OutputTuple,
      TransactionLimitExceededEvent.OutputObject
    >;
    TransactionLimitExceeded: TypedContractEvent<
      TransactionLimitExceededEvent.InputTuple,
      TransactionLimitExceededEvent.OutputTuple,
      TransactionLimitExceededEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserBlacklisted(address,string,uint256)": TypedContractEvent<
      UserBlacklistedEvent.InputTuple,
      UserBlacklistedEvent.OutputTuple,
      UserBlacklistedEvent.OutputObject
    >;
    UserBlacklisted: TypedContractEvent<
      UserBlacklistedEvent.InputTuple,
      UserBlacklistedEvent.OutputTuple,
      UserBlacklistedEvent.OutputObject
    >;

    "UserVerified(address,string,uint8,uint256)": TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
    UserVerified: TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
  };
}
