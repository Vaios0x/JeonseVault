/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PropertyOracle {
  export type PropertyDataStruct = {
    propertyId: string;
    fullAddress: string;
    owner: AddressLike;
    marketValue: BigNumberish;
    lastValuation: BigNumberish;
    isVerified: boolean;
    isActive: boolean;
    lastInspection: BigNumberish;
    propertyType: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
    pythValidationTimestamp: BigNumberish;
  };

  export type PropertyDataStructOutput = [
    propertyId: string,
    fullAddress: string,
    owner: string,
    marketValue: bigint,
    lastValuation: bigint,
    isVerified: boolean,
    isActive: boolean,
    lastInspection: bigint,
    propertyType: bigint,
    createdAt: bigint,
    updatedAt: bigint,
    pythValidationTimestamp: bigint
  ] & {
    propertyId: string;
    fullAddress: string;
    owner: string;
    marketValue: bigint;
    lastValuation: bigint;
    isVerified: boolean;
    isActive: boolean;
    lastInspection: bigint;
    propertyType: bigint;
    createdAt: bigint;
    updatedAt: bigint;
    pythValidationTimestamp: bigint;
  };
}

export interface PropertyOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_PROPERTY_VALUE"
      | "MIN_PROPERTY_VALUE"
      | "ORACLE_ROLE"
      | "PRICE_DEVIATION_THRESHOLD"
      | "PRICE_VALIDATION_THRESHOLD"
      | "STALENESS_THRESHOLD"
      | "VALUATION_VALIDITY_PERIOD"
      | "VERIFICATION_VALIDITY_PERIOD"
      | "VERIFIER_ROLE"
      | "allPropertyIds"
      | "batchUpdateValues"
      | "batchVerifyProperties"
      | "deactivateProperty"
      | "getAllProperties"
      | "getOwnerProperties"
      | "getProperty"
      | "getPropertyCount"
      | "getPropertyHistory"
      | "getPythValidationStats"
      | "getRoleAdmin"
      | "getVerifiedPropertyCount"
      | "grantRole"
      | "hasRole"
      | "isPropertyVerified"
      | "isValueCurrent"
      | "needsPythRevalidation"
      | "ownerProperties"
      | "pause"
      | "paused"
      | "properties"
      | "propertyHistory"
      | "reactivateProperty"
      | "recordInspection"
      | "registerProperty"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "transferOwnership"
      | "unpause"
      | "updatePropertyValue"
      | "verifyProperty"
      | "verifyPropertyOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "Paused"
      | "PropertyInspected"
      | "PropertyRegistered"
      | "PropertyValueUpdated"
      | "PropertyVerified"
      | "PythPriceValidated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROPERTY_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PROPERTY_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_DEVIATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_VALIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STALENESS_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALUATION_VALIDITY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFICATION_VALIDITY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allPropertyIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateValues",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchVerifyProperties",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateProperty",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProperties",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerProperties",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getProperty", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPropertyCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertyHistory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPythValidationStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedPropertyCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPropertyVerified",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValueCurrent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "needsPythRevalidation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerProperties",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "properties", values: [string]): string;
  encodeFunctionData(
    functionFragment: "propertyHistory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reactivateProperty",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recordInspection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProperty",
    values: [string, string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePropertyValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProperty",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPropertyOwnership",
    values: [string, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROPERTY_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PROPERTY_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_DEVIATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_VALIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STALENESS_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALUATION_VALIDITY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFICATION_VALIDITY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allPropertyIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchVerifyProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertyHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPythValidationStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedPropertyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPropertyVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValueCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "needsPythRevalidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "properties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertyHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reactivateProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordInspection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePropertyValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPropertyOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [
    propertyId: string,
    oldOwner: AddressLike,
    newOwner: AddressLike
  ];
  export type OutputTuple = [
    propertyId: string,
    oldOwner: string,
    newOwner: string
  ];
  export interface OutputObject {
    propertyId: string;
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyInspectedEvent {
  export type InputTuple = [
    propertyId: string,
    inspector: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    propertyId: string,
    inspector: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    propertyId: string;
    inspector: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyRegisteredEvent {
  export type InputTuple = [
    propertyId: string,
    owner: AddressLike,
    marketValue: BigNumberish,
    propertyType: BigNumberish
  ];
  export type OutputTuple = [
    propertyId: string,
    owner: string,
    marketValue: bigint,
    propertyType: bigint
  ];
  export interface OutputObject {
    propertyId: string;
    owner: string;
    marketValue: bigint;
    propertyType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyValueUpdatedEvent {
  export type InputTuple = [
    propertyId: string,
    oldValue: BigNumberish,
    newValue: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    propertyId: string,
    oldValue: bigint,
    newValue: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    propertyId: string;
    oldValue: bigint;
    newValue: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyVerifiedEvent {
  export type InputTuple = [
    propertyId: string,
    verifier: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    propertyId: string,
    verifier: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    propertyId: string;
    verifier: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PythPriceValidatedEvent {
  export type InputTuple = [
    propertyId: string,
    propertyValue: BigNumberish,
    krwUsdPrice: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    propertyId: string,
    propertyValue: bigint,
    krwUsdPrice: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    propertyId: string;
    propertyValue: bigint;
    krwUsdPrice: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PropertyOracle extends BaseContract {
  connect(runner?: ContractRunner | null): PropertyOracle;
  waitForDeployment(): Promise<this>;

  interface: PropertyOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_PROPERTY_VALUE: TypedContractMethod<[], [bigint], "view">;

  MIN_PROPERTY_VALUE: TypedContractMethod<[], [bigint], "view">;

  ORACLE_ROLE: TypedContractMethod<[], [string], "view">;

  PRICE_DEVIATION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  PRICE_VALIDATION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  STALENESS_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  VALUATION_VALIDITY_PERIOD: TypedContractMethod<[], [bigint], "view">;

  VERIFICATION_VALIDITY_PERIOD: TypedContractMethod<[], [bigint], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  allPropertyIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  batchUpdateValues: TypedContractMethod<
    [propertyIds: string[], newValues: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchVerifyProperties: TypedContractMethod<
    [propertyIds: string[]],
    [void],
    "nonpayable"
  >;

  deactivateProperty: TypedContractMethod<
    [propertyId: string],
    [void],
    "nonpayable"
  >;

  getAllProperties: TypedContractMethod<[], [string[]], "view">;

  getOwnerProperties: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  getProperty: TypedContractMethod<
    [propertyId: string],
    [PropertyOracle.PropertyDataStructOutput],
    "view"
  >;

  getPropertyCount: TypedContractMethod<[], [bigint], "view">;

  getPropertyHistory: TypedContractMethod<
    [propertyId: string],
    [string[]],
    "view"
  >;

  getPythValidationStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalProperties: bigint;
        validatedWithPyth: bigint;
        lastValidationTimestamp: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getVerifiedPropertyCount: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isPropertyVerified: TypedContractMethod<
    [propertyId: string],
    [boolean],
    "view"
  >;

  isValueCurrent: TypedContractMethod<[propertyId: string], [boolean], "view">;

  needsPythRevalidation: TypedContractMethod<
    [propertyId: string],
    [boolean],
    "view"
  >;

  ownerProperties: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  properties: TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        propertyId: string;
        fullAddress: string;
        owner: string;
        marketValue: bigint;
        lastValuation: bigint;
        isVerified: boolean;
        isActive: boolean;
        lastInspection: bigint;
        propertyType: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        pythValidationTimestamp: bigint;
      }
    ],
    "view"
  >;

  propertyHistory: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [string],
    "view"
  >;

  reactivateProperty: TypedContractMethod<
    [propertyId: string],
    [void],
    "nonpayable"
  >;

  recordInspection: TypedContractMethod<
    [propertyId: string],
    [void],
    "nonpayable"
  >;

  registerProperty: TypedContractMethod<
    [
      propertyId: string,
      fullAddress: string,
      owner: AddressLike,
      marketValue: BigNumberish,
      propertyType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [propertyId: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updatePropertyValue: TypedContractMethod<
    [propertyId: string, newValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifyProperty: TypedContractMethod<
    [propertyId: string],
    [void],
    "nonpayable"
  >;

  verifyPropertyOwnership: TypedContractMethod<
    [propertyId: string, owner: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_PROPERTY_VALUE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PROPERTY_VALUE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ORACLE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRICE_DEVIATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_VALIDATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STALENESS_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALUATION_VALIDITY_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERIFICATION_VALIDITY_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allPropertyIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "batchUpdateValues"
  ): TypedContractMethod<
    [propertyIds: string[], newValues: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchVerifyProperties"
  ): TypedContractMethod<[propertyIds: string[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deactivateProperty"
  ): TypedContractMethod<[propertyId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllProperties"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getOwnerProperties"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getProperty"
  ): TypedContractMethod<
    [propertyId: string],
    [PropertyOracle.PropertyDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPropertyCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPropertyHistory"
  ): TypedContractMethod<[propertyId: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPythValidationStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalProperties: bigint;
        validatedWithPyth: bigint;
        lastValidationTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getVerifiedPropertyCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPropertyVerified"
  ): TypedContractMethod<[propertyId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValueCurrent"
  ): TypedContractMethod<[propertyId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "needsPythRevalidation"
  ): TypedContractMethod<[propertyId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "ownerProperties"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "properties"
  ): TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        propertyId: string;
        fullAddress: string;
        owner: string;
        marketValue: bigint;
        lastValuation: bigint;
        isVerified: boolean;
        isActive: boolean;
        lastInspection: bigint;
        propertyType: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        pythValidationTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propertyHistory"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "reactivateProperty"
  ): TypedContractMethod<[propertyId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recordInspection"
  ): TypedContractMethod<[propertyId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerProperty"
  ): TypedContractMethod<
    [
      propertyId: string,
      fullAddress: string,
      owner: AddressLike,
      marketValue: BigNumberish,
      propertyType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [propertyId: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePropertyValue"
  ): TypedContractMethod<
    [propertyId: string, newValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyProperty"
  ): TypedContractMethod<[propertyId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyPropertyOwnership"
  ): TypedContractMethod<
    [propertyId: string, owner: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PropertyInspected"
  ): TypedContractEvent<
    PropertyInspectedEvent.InputTuple,
    PropertyInspectedEvent.OutputTuple,
    PropertyInspectedEvent.OutputObject
  >;
  getEvent(
    key: "PropertyRegistered"
  ): TypedContractEvent<
    PropertyRegisteredEvent.InputTuple,
    PropertyRegisteredEvent.OutputTuple,
    PropertyRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "PropertyValueUpdated"
  ): TypedContractEvent<
    PropertyValueUpdatedEvent.InputTuple,
    PropertyValueUpdatedEvent.OutputTuple,
    PropertyValueUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PropertyVerified"
  ): TypedContractEvent<
    PropertyVerifiedEvent.InputTuple,
    PropertyVerifiedEvent.OutputTuple,
    PropertyVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "PythPriceValidated"
  ): TypedContractEvent<
    PythPriceValidatedEvent.InputTuple,
    PythPriceValidatedEvent.OutputTuple,
    PythPriceValidatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(string,address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PropertyInspected(string,address,uint256)": TypedContractEvent<
      PropertyInspectedEvent.InputTuple,
      PropertyInspectedEvent.OutputTuple,
      PropertyInspectedEvent.OutputObject
    >;
    PropertyInspected: TypedContractEvent<
      PropertyInspectedEvent.InputTuple,
      PropertyInspectedEvent.OutputTuple,
      PropertyInspectedEvent.OutputObject
    >;

    "PropertyRegistered(string,address,uint256,uint8)": TypedContractEvent<
      PropertyRegisteredEvent.InputTuple,
      PropertyRegisteredEvent.OutputTuple,
      PropertyRegisteredEvent.OutputObject
    >;
    PropertyRegistered: TypedContractEvent<
      PropertyRegisteredEvent.InputTuple,
      PropertyRegisteredEvent.OutputTuple,
      PropertyRegisteredEvent.OutputObject
    >;

    "PropertyValueUpdated(string,uint256,uint256,uint256)": TypedContractEvent<
      PropertyValueUpdatedEvent.InputTuple,
      PropertyValueUpdatedEvent.OutputTuple,
      PropertyValueUpdatedEvent.OutputObject
    >;
    PropertyValueUpdated: TypedContractEvent<
      PropertyValueUpdatedEvent.InputTuple,
      PropertyValueUpdatedEvent.OutputTuple,
      PropertyValueUpdatedEvent.OutputObject
    >;

    "PropertyVerified(string,address,uint256)": TypedContractEvent<
      PropertyVerifiedEvent.InputTuple,
      PropertyVerifiedEvent.OutputTuple,
      PropertyVerifiedEvent.OutputObject
    >;
    PropertyVerified: TypedContractEvent<
      PropertyVerifiedEvent.InputTuple,
      PropertyVerifiedEvent.OutputTuple,
      PropertyVerifiedEvent.OutputObject
    >;

    "PythPriceValidated(string,uint256,uint256,uint256)": TypedContractEvent<
      PythPriceValidatedEvent.InputTuple,
      PythPriceValidatedEvent.OutputTuple,
      PythPriceValidatedEvent.OutputObject
    >;
    PythPriceValidated: TypedContractEvent<
      PythPriceValidatedEvent.InputTuple,
      PythPriceValidatedEvent.OutputTuple,
      PythPriceValidatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
