/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface InvestmentPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGEMENT_FEE"
      | "MIN_INVESTMENT"
      | "PERFORMANCE_FEE"
      | "VAULT_ROLE"
      | "addDepositToPool"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "collectFees"
      | "decimals"
      | "decreaseAllowance"
      | "depositInvestors"
      | "depositPools"
      | "distributeReturns"
      | "emergencyWithdraw"
      | "getDepositInvestors"
      | "getDepositPool"
      | "getRoleAdmin"
      | "getTotalPoolStats"
      | "getUserInvestments"
      | "getUserSharesInDeposit"
      | "grantRole"
      | "hasRole"
      | "increaseAllowance"
      | "investInDeposit"
      | "name"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "symbol"
      | "totalPoolValue"
      | "totalShares"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unpause"
      | "userInvestments"
      | "userShares"
      | "withdrawFromDeposit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "DepositAdded"
      | "FeesCollected"
      | "InvestmentMade"
      | "InvestmentWithdrawn"
      | "Paused"
      | "ReturnsDistributed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGEMENT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_INVESTMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERFORMANCE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VAULT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDepositToPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInvestors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReturns",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositInvestors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPoolStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInvestments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSharesInDeposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investInDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPoolValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userInvestments",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userShares",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromDeposit",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGEMENT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_INVESTMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERFORMANCE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VAULT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addDepositToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeReturns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPoolStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSharesInDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investInDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPoolValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromDeposit",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositAddedEvent {
  export type InputTuple = [
    depositId: BigNumberish,
    amount: BigNumberish,
    expectedReturn: BigNumberish
  ];
  export type OutputTuple = [
    depositId: bigint,
    amount: bigint,
    expectedReturn: bigint
  ];
  export interface OutputObject {
    depositId: bigint;
    amount: bigint;
    expectedReturn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesCollectedEvent {
  export type InputTuple = [
    managementFees: BigNumberish,
    performanceFees: BigNumberish
  ];
  export type OutputTuple = [managementFees: bigint, performanceFees: bigint];
  export interface OutputObject {
    managementFees: bigint;
    performanceFees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentMadeEvent {
  export type InputTuple = [
    investor: AddressLike,
    depositId: BigNumberish,
    amount: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    investor: string,
    depositId: bigint,
    amount: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    investor: string;
    depositId: bigint;
    amount: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentWithdrawnEvent {
  export type InputTuple = [
    investor: AddressLike,
    depositId: BigNumberish,
    amount: BigNumberish,
    profit: BigNumberish
  ];
  export type OutputTuple = [
    investor: string,
    depositId: bigint,
    amount: bigint,
    profit: bigint
  ];
  export interface OutputObject {
    investor: string;
    depositId: bigint;
    amount: bigint;
    profit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnsDistributedEvent {
  export type InputTuple = [
    depositId: BigNumberish,
    totalReturns: BigNumberish
  ];
  export type OutputTuple = [depositId: bigint, totalReturns: bigint];
  export interface OutputObject {
    depositId: bigint;
    totalReturns: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InvestmentPool extends BaseContract {
  connect(runner?: ContractRunner | null): InvestmentPool;
  waitForDeployment(): Promise<this>;

  interface: InvestmentPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MANAGEMENT_FEE: TypedContractMethod<[], [bigint], "view">;

  MIN_INVESTMENT: TypedContractMethod<[], [bigint], "view">;

  PERFORMANCE_FEE: TypedContractMethod<[], [bigint], "view">;

  VAULT_ROLE: TypedContractMethod<[], [string], "view">;

  addDepositToPool: TypedContractMethod<
    [depositId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  collectFees: TypedContractMethod<[], [void], "nonpayable">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  depositInvestors: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  depositPools: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        depositId: bigint;
        totalAmount: bigint;
        availableAmount: bigint;
        totalInvested: bigint;
        expectedReturn: bigint;
        actualReturn: bigint;
        startDate: bigint;
        endDate: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  distributeReturns: TypedContractMethod<
    [depositId: BigNumberish, totalReturns: BigNumberish],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getDepositInvestors: TypedContractMethod<
    [depositId: BigNumberish],
    [string[]],
    "view"
  >;

  getDepositPool: TypedContractMethod<
    [depositId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalAmount: bigint;
        availableAmount: bigint;
        totalInvested: bigint;
        expectedReturn: bigint;
        actualReturn: bigint;
        startDate: bigint;
        endDate: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalPoolStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _totalPoolValue: bigint;
        _totalShares: bigint;
        _totalInvestors: bigint;
      }
    ],
    "view"
  >;

  getUserInvestments: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserSharesInDeposit: TypedContractMethod<
    [user: AddressLike, depositId: BigNumberish],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  investInDeposit: TypedContractMethod<
    [depositId: BigNumberish],
    [void],
    "payable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalPoolValue: TypedContractMethod<[], [bigint], "view">;

  totalShares: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userInvestments: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userShares: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawFromDeposit: TypedContractMethod<
    [depositId: BigNumberish, shareAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MANAGEMENT_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_INVESTMENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PERFORMANCE_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VAULT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addDepositToPool"
  ): TypedContractMethod<
    [depositId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositInvestors"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositPools"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        depositId: bigint;
        totalAmount: bigint;
        availableAmount: bigint;
        totalInvested: bigint;
        expectedReturn: bigint;
        actualReturn: bigint;
        startDate: bigint;
        endDate: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "distributeReturns"
  ): TypedContractMethod<
    [depositId: BigNumberish, totalReturns: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDepositInvestors"
  ): TypedContractMethod<[depositId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDepositPool"
  ): TypedContractMethod<
    [depositId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalAmount: bigint;
        availableAmount: bigint;
        totalInvested: bigint;
        expectedReturn: bigint;
        actualReturn: bigint;
        startDate: bigint;
        endDate: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalPoolStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _totalPoolValue: bigint;
        _totalShares: bigint;
        _totalInvestors: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserInvestments"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserSharesInDeposit"
  ): TypedContractMethod<
    [user: AddressLike, depositId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "investInDeposit"
  ): TypedContractMethod<[depositId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalPoolValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalShares"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userInvestments"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userShares"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFromDeposit"
  ): TypedContractMethod<
    [depositId: BigNumberish, shareAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "DepositAdded"
  ): TypedContractEvent<
    DepositAddedEvent.InputTuple,
    DepositAddedEvent.OutputTuple,
    DepositAddedEvent.OutputObject
  >;
  getEvent(
    key: "FeesCollected"
  ): TypedContractEvent<
    FeesCollectedEvent.InputTuple,
    FeesCollectedEvent.OutputTuple,
    FeesCollectedEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentMade"
  ): TypedContractEvent<
    InvestmentMadeEvent.InputTuple,
    InvestmentMadeEvent.OutputTuple,
    InvestmentMadeEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentWithdrawn"
  ): TypedContractEvent<
    InvestmentWithdrawnEvent.InputTuple,
    InvestmentWithdrawnEvent.OutputTuple,
    InvestmentWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReturnsDistributed"
  ): TypedContractEvent<
    ReturnsDistributedEvent.InputTuple,
    ReturnsDistributedEvent.OutputTuple,
    ReturnsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "DepositAdded(uint256,uint256,uint256)": TypedContractEvent<
      DepositAddedEvent.InputTuple,
      DepositAddedEvent.OutputTuple,
      DepositAddedEvent.OutputObject
    >;
    DepositAdded: TypedContractEvent<
      DepositAddedEvent.InputTuple,
      DepositAddedEvent.OutputTuple,
      DepositAddedEvent.OutputObject
    >;

    "FeesCollected(uint256,uint256)": TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;
    FeesCollected: TypedContractEvent<
      FeesCollectedEvent.InputTuple,
      FeesCollectedEvent.OutputTuple,
      FeesCollectedEvent.OutputObject
    >;

    "InvestmentMade(address,uint256,uint256,uint256)": TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;
    InvestmentMade: TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;

    "InvestmentWithdrawn(address,uint256,uint256,uint256)": TypedContractEvent<
      InvestmentWithdrawnEvent.InputTuple,
      InvestmentWithdrawnEvent.OutputTuple,
      InvestmentWithdrawnEvent.OutputObject
    >;
    InvestmentWithdrawn: TypedContractEvent<
      InvestmentWithdrawnEvent.InputTuple,
      InvestmentWithdrawnEvent.OutputTuple,
      InvestmentWithdrawnEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReturnsDistributed(uint256,uint256)": TypedContractEvent<
      ReturnsDistributedEvent.InputTuple,
      ReturnsDistributedEvent.OutputTuple,
      ReturnsDistributedEvent.OutputObject
    >;
    ReturnsDistributed: TypedContractEvent<
      ReturnsDistributedEvent.InputTuple,
      ReturnsDistributedEvent.OutputTuple,
      ReturnsDistributedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
