# Ejemplo de configuraci√≥n del workflow de CI/CD
# Este archivo muestra c√≥mo configurar las variables de entorno correctamente

name: üöÄ CI/CD Pipeline - Example

# ============================================================================
# CONFIGURACI√ìN DE VARIABLES DE ENTORNO
# ============================================================================
# Las siguientes variables deben configurarse en GitHub Secrets:
#
# 1. Ve a tu repositorio en GitHub
# 2. Settings ‚Üí Secrets and variables ‚Üí Actions
# 3. Haz clic en "New repository secret"
# 4. Agrega cada variable con su nombre y valor

env:
  # Variables de entorno b√°sicas
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: jeonsevault

  # Variables de entorno para desarrollo (opcionales)
  NODE_ENV: production
  NEXT_PUBLIC_APP_URL: https://jeonsevault.com

# ============================================================================
# SECRETS REQUERIDOS
# ============================================================================
# Los siguientes secrets deben configurarse en GitHub:
#
# üîí Security
# SNYK_TOKEN: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
#
# üìú Smart Contract Deployment
# DEPLOY_PRIVATE_KEY: 0x... (64 caracteres hexadecimales)
# RPC_URL: https://mainnet.infura.io/v3/YOUR_PROJECT_ID
# ETHERSCAN_API_KEY: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#
# üöÄ Staging Deployment
# STAGING_HOST: staging.jeonsevault.com
# STAGING_USER: deploy
# STAGING_SSH_KEY: -----BEGIN OPENSSH PRIVATE KEY-----...
#
# üöÄ Production Deployment
# PRODUCTION_HOST: jeonsevault.com
# PRODUCTION_USER: deploy
# PRODUCTION_SSH_KEY: -----BEGIN OPENSSH PRIVATE KEY-----...
# PRODUCTION_DOMAIN: jeonsevault.com

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Ejemplo de job que usa las variables de entorno
  example-job:
    name: üîß Example Job
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Example with secrets
        run: |
          echo "Using environment variables:"
          echo "NODE_VERSION: ${{ env.NODE_VERSION }}"
          echo "REGISTRY: ${{ env.REGISTRY }}"
          
          # Las variables de secrets est√°n disponibles como:
          # ${{ secrets.SNYK_TOKEN }}
          # ${{ secrets.DEPLOY_PRIVATE_KEY }}
          # ${{ secrets.RPC_URL }}
          # etc.
          
      - name: Example Snyk scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: Example deployment setup
        run: |
          # Ejemplo de configuraci√≥n de variables de entorno
          echo "PRIVATE_KEY=${{ secrets.DEPLOY_PRIVATE_KEY }}" >> .env
          echo "RPC_URL=${{ secrets.RPC_URL }}" >> .env
          echo "ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}" >> .env

# ============================================================================
# NOTAS IMPORTANTES
# ============================================================================
# 
# 1. NUNCA commits valores de secrets directamente en el c√≥digo
# 2. Usa siempre GitHub Secrets para informaci√≥n sensible
# 3. Las variables de entorno (env) son p√∫blicas y visibles en los logs
# 4. Los secrets son privados y se ocultan en los logs
# 5. Verifica que todos los secrets est√©n configurados antes de ejecutar el workflow
#
# Para m√°s informaci√≥n, consulta:
# - docs/GITHUB_SECRETS.md
# - .github/workflows/ci-cd.yml (workflow completo)
