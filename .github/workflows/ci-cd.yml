name: 🚀 CI/CD Pipeline - JeonseVault

# ============================================================================
# REQUIRED SECRETS
# ============================================================================
# The following secrets must be configured in the repository settings:
# - SNYK_TOKEN: Snyk API token for security scanning
# - DEPLOY_PRIVATE_KEY: Private key for smart contract deployment
# - RPC_URL: Ethereum RPC endpoint URL
# - ETHERSCAN_API_KEY: Etherscan API key for contract verification
# - STAGING_HOST: Staging server hostname/IP
# - STAGING_USER: SSH username for staging server
# - STAGING_SSH_KEY: SSH private key for staging server
# - PRODUCTION_HOST: Production server hostname/IP
# - PRODUCTION_USER: SSH username for production server
# - PRODUCTION_SSH_KEY: SSH private key for production server
# - PRODUCTION_DOMAIN: Production domain name
# ============================================================================

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: jeonsevault

jobs:
  # ============================================================================
  # SECURITY AUDIT
  # ============================================================================
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: |
          echo "🔒 Running security audit..."
          npm run security:audit
          
      - name: Check dependencies
        run: |
          echo "📦 Checking dependencies for vulnerabilities..."
          npm audit --audit-level=moderate
          
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: |
            security-audit-report.html
            snyk-report.json

  # ============================================================================
  # SMART CONTRACT TESTING
  # ============================================================================
  contract-testing:
    name: 📜 Smart Contract Testing
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup Hardhat
        run: |
          echo "🔧 Setting up Hardhat environment..."
          npx hardhat compile
          
      - name: Run contract tests
        run: |
          echo "🧪 Running smart contract tests..."
          npm run test:contracts
          
      - name: Run contract coverage
        run: |
          echo "📊 Generating test coverage..."
          npm run test:coverage
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: contract-test-results
          path: |
            coverage/
            test-results/

  # ============================================================================
  # FRONTEND TESTING
  # ============================================================================
  frontend-testing:
    name: 🎨 Frontend Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          npm run test:unit
          
      - name: Run integration tests
        run: |
          echo "🔗 Running integration tests..."
          npm run test:integration
          
      - name: Run accessibility tests
        run: |
          echo "♿ Running accessibility tests..."
          npm run test:accessibility
          
      - name: Run performance tests
        run: |
          echo "⚡ Running performance tests..."
          npm run test:performance
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            test-results/
            coverage/

  # ============================================================================
  # E2E TESTING
  # ============================================================================
  e2e-testing:
    name: 🌐 E2E Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run E2E tests
        run: |
          echo "🌐 Running E2E tests..."
          npm run test:e2e
          
      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

  # ============================================================================
  # CODE QUALITY
  # ============================================================================
  code-quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: |
          echo "🔍 Running ESLint..."
          npm run lint
          
      - name: Check formatting
        run: |
          echo "🎨 Checking code formatting..."
          npm run format:check
          
      - name: Type checking
        run: |
          echo "🔧 Running TypeScript checks..."
          npm run type-check

  # ============================================================================
  # BUILD & OPTIMIZATION
  # ============================================================================
  build:
    name: 🏗️ Build & Optimize
    runs-on: ubuntu-latest
    needs: [security-audit, contract-testing, frontend-testing, e2e-testing, code-quality]
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate PWA assets
        run: |
          echo "📱 Generating PWA assets..."
          npm run pwa:generate
          
      - name: Optimize images
        run: |
          echo "🖼️ Optimizing images..."
          npm run optimize:images
          
      - name: Build application
        run: |
          echo "🏗️ Building application..."
          npm run build
          
      - name: Run Lighthouse audit
        run: |
          echo "💡 Running Lighthouse audit..."
          npm run lighthouse
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            public/
            dist/

  # ============================================================================
  # SMART CONTRACT DEPLOYMENT
  # ============================================================================
  deploy-contracts:
    name: 📜 Deploy Smart Contracts
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup environment
        run: |
          echo "🔧 Setting up deployment environment..."
          cp .env.example .env
          echo "PRIVATE_KEY=${{ secrets.DEPLOY_PRIVATE_KEY }}" >> .env
          echo "RPC_URL=${{ secrets.RPC_URL }}" >> .env
          echo "ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}" >> .env
          
      - name: Deploy contracts
        run: |
          echo "🚀 Deploying smart contracts..."
          npm run deploy:production
          
      - name: Verify contracts
        run: |
          echo "✅ Verifying contracts on Etherscan..."
          npm run verify:contracts
          
      - name: Run post-deployment tests
        run: |
          echo "🧪 Running post-deployment tests..."
          npm run test:deployed
          
      - name: Update contract addresses
        run: |
          echo "📝 Updating contract addresses..."
          node scripts/update-contract-addresses.js

  # ============================================================================
  # DOCKER BUILD
  # ============================================================================
  docker-build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # STAGING DEPLOYMENT
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.jeonsevault.com
    timeout-minutes: 30
    
    steps:
      - name: Deploy to staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/jeonsevault
            docker-compose pull
            docker-compose up -d
            docker system prune -f
            
      - name: Run health checks
        run: |
          echo "🏥 Running health checks..."
          curl -f http://${{ secrets.STAGING_HOST }}/api/health || exit 1
          
      - name: Run smoke tests
        run: |
          echo "💨 Running smoke tests..."
          npm run test:smoke -- --base-url=http://${{ secrets.STAGING_HOST }}

  # ============================================================================
  # PRODUCTION DEPLOYMENT
  # ============================================================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-contracts, docker-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment:
      name: production
      url: https://jeonsevault.com
    timeout-minutes: 45
    
    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/jeonsevault
            docker-compose pull
            docker-compose up -d
            docker system prune -f
            
      - name: Run health checks
        run: |
          echo "🏥 Running health checks..."
          curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/api/health || exit 1
          
      - name: Run smoke tests
        run: |
          echo "💨 Running smoke tests..."
          npm run test:smoke -- --base-url=https://${{ secrets.PRODUCTION_DOMAIN }}
          
      - name: Notify deployment
        run: |
          echo "📢 Deployment completed successfully!"
          # Add notification logic here (Slack, Discord, etc.)

  # ============================================================================
  # MONITORING & ALERTS
  # ============================================================================
  monitoring:
    name: 📊 Monitoring Setup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 20
    
    steps:
      - name: Setup monitoring
        run: |
          echo "📊 Setting up monitoring..."
          # Add monitoring setup logic here
          
      - name: Configure alerts
        run: |
          echo "🚨 Configuring alerts..."
          # Add alert configuration logic here
          
      - name: Test monitoring
        run: |
          echo "🧪 Testing monitoring setup..."
          # Add monitoring test logic here

  # ============================================================================
  # PERFORMANCE TESTING
  # ============================================================================
  performance-testing:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run load tests
        run: |
          echo "📈 Running load tests..."
          npm run test:load
          
      - name: Run stress tests
        run: |
          echo "💪 Running stress tests..."
          npm run test:stress
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            test-results/
            performance-reports/

  # ============================================================================
  # BACKUP & RECOVERY
  # ============================================================================
  backup:
    name: 💾 Backup & Recovery
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 20
    
    steps:
      - name: Create backup
        run: |
          echo "💾 Creating backup..."
          # Add backup logic here
          
      - name: Test backup
        run: |
          echo "🧪 Testing backup..."
          # Add backup test logic here
          
      - name: Upload backup report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backup-report
          path: backup-reports/

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================
  notifications:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, monitoring, performance-testing, backup]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Send success notification
        if: success()
        run: |
          echo "✅ Pipeline completed successfully!"
          # Add success notification logic here
          
      - name: Send failure notification
        if: failure()
        run: |
          echo "❌ Pipeline failed!"
          # Add failure notification logic here
