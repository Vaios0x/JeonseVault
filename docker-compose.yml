version: '3.8'

# ============================================================================
# JeonseVault Production Docker Compose
# Configuración completa para producción con monitoreo y backup
# ============================================================================

services:
  # ============================================================================
  # APLICACIÓN PRINCIPAL
  # ============================================================================
  jeonsevault:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: jeonsevault-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - NEXT_PUBLIC_JEONSE_VAULT_ADDRESS=${NEXT_PUBLIC_JEONSE_VAULT_ADDRESS}
      - NEXT_PUBLIC_INVESTMENT_POOL_ADDRESS=${NEXT_PUBLIC_INVESTMENT_POOL_ADDRESS}
      - NEXT_PUBLIC_PROPERTY_ORACLE_ADDRESS=${NEXT_PUBLIC_PROPERTY_ORACLE_ADDRESS}
      - NEXT_PUBLIC_COMPLIANCE_MODULE_ADDRESS=${NEXT_PUBLIC_COMPLIANCE_MODULE_ADDRESS}
      - NEXT_PUBLIC_RPC_URL=${NEXT_PUBLIC_RPC_URL}
      - NEXT_PUBLIC_CHAIN_ID=${NEXT_PUBLIC_CHAIN_ID}
      - NEXT_PUBLIC_EXPLORER_URL=${NEXT_PUBLIC_EXPLORER_URL}
      - ANALYTICS_API_KEY=${ANALYTICS_API_KEY}
      - SNYK_TOKEN=${SNYK_TOKEN}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - nginx
    networks:
      - jeonsevault-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # ============================================================================
  # BASE DE DATOS POSTGRESQL
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: jeonsevault-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-jeonsevault}
      - POSTGRES_USER=${POSTGRES_USER:-jeonsevault}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - jeonsevault-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-jeonsevault}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================================================
  # REDIS CACHE
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: jeonsevault-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - jeonsevault-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ============================================================================
  # NGINX REVERSE PROXY
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: jeonsevault-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - jeonsevault
    networks:
      - jeonsevault-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ============================================================================
  # MONITORING - PROMETHEUS
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: jeonsevault-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
      - ./monitoring/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - jeonsevault-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ============================================================================
  # MONITORING - GRAFANA
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: jeonsevault-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - jeonsevault-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ============================================================================
  # MONITORING - ALERTMANAGER
  # ============================================================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: jeonsevault-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - jeonsevault-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ============================================================================
  # LOGGING - ELASTICSEARCH
  # ============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: jeonsevault-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - jeonsevault-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================================================
  # LOGGING - KIBANA
  # ============================================================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: jeonsevault-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - jeonsevault-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ============================================================================
  # LOGGING - FILEBEAT
  # ============================================================================
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: jeonsevault-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/jeonsevault:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    networks:
      - jeonsevault-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ============================================================================
  # BACKUP - AUTOMATED BACKUP SERVICE
  # ============================================================================
  backup:
    image: postgres:15-alpine
    container_name: jeonsevault-backup
    restart: "no"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-jeonsevault}
      - POSTGRES_USER=${POSTGRES_USER:-jeonsevault}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    depends_on:
      - postgres
    networks:
      - jeonsevault-network
    command: ["/bin/sh", "-c", "chmod +x /backup.sh && /backup.sh"]
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ============================================================================
  # SECURITY - VAULT (opcional para secretos)
  # ============================================================================
  vault:
    image: vault:latest
    container_name: jeonsevault-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/file
    networks:
      - jeonsevault-network
    cap_add:
      - IPC_LOCK
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ============================================================================
  # DEVELOPMENT - MAILHOG (para testing de emails)
  # ============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: jeonsevault-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - jeonsevault-network
    profiles:
      - development
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  elasticsearch_data:
    driver: local
  vault_data:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  jeonsevault-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
